{% for host in groups[vsphere_management_hosts_group] %}
$vmHost="{{ hostvars[host]['ansible_host'] }}"
Connect-VIServer -Server $vmHost
$vmServer=(Get-VMHost -Server $vmHost)
{% for vswitch in vsphere_vswitches %}
$CurrentvSwitches=@(($vmServer | Get-VirtualSwitch).Name)
$vSwitchName="{{ vswitch['name'] }}"
if ($CurrentvSwitches -notcontains $vSwitchName){
  "Adding $vSwitchName on $vmHost" | Out-File -Append {{ vsphere_management_log }}
  New-VirtualSwitch -Server $vmHost -Name $vSwitchName -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
}
{%   if vswitch['active_nics'] is defined %}
$DesiredActiveNics=@("{{ vswitch['active_nics']|join('", "') }}")
{%   elif vswitch['active_nics'] is not defined %}
$DesiredActiveNics=@()
{%   endif %}
{%   if vswitch['standby_nics'] is defined %}
$DesiredStandbyNics=@("{{ vswitch['standby_nics']|join('", "') }}")
{%   elif vswitch['standby_nics'] is not defined %}
$DesiredStandbyNics=@()
{%   endif %}
{%   if vswitch['unused_nics'] is defined %}
$DesiredUnusedNics=@("{{ vswitch['unused_nics']|join('", "') }}")
{%   elif vswitch['unused_nics'] is not defined %}
$DesiredUnusedNics=@()
{%   endif %}
$vSwitch=(Get-VirtualSwitch -Server $vmHost -Name $vSwitchName)
$CurrentNics=@($vSwitch | Get-VMHostNetworkAdapter -Physical | Select-Object -ExpandProperty Name)
if ($DesiredActiveNics -ne $null) {
  Foreach ($i in $DesiredActiveNics){
    if ($CurrentNics -notcontains $i){
      "Adding $i to $vSwitch on $vmHost" | Out-File -Append {{ vsphere_management_log }}
      $Nic=$(Get-VMHostNetworkAdapter -Server $vmHost -Physical -Name $i)
      $vSwitch | Add-VirtualSwitchPhysicalNetworkAdapter -VMHostPhysicalNic $Nic -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
    }
  }
}
if ($DesiredStandbyNics -ne $null) {
  Foreach ($i in $DesiredStandbyNics){
    if ($CurrentNics -notcontains $i){
      "Adding $i to $vSwitch on $vmHost" | Out-File -Append {{ vsphere_management_log }}
      $Nic=$(Get-VMHostNetworkAdapter -Server $vmHost -Physical -Name $i)
      $vSwitch | Add-VirtualSwitchPhysicalNetworkAdapter -VMHostPhysicalNic $Nic -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
    }
  }
}
if ($DesiredUnusedNics -ne $null) {
  Foreach ($i in $DesiredUnusedNics){
    if ($CurrentNics -notcontains $i){
      "Adding $i to $vSwitch on $vmHost" | Out-File -Append {{ vsphere_management_log }}
      $Nic=$(Get-VMHostNetworkAdapter -Server $vmHost -Physical -Name $i)
      $vSwitch | Add-VirtualSwitchPhysicalNetworkAdapter -VMHostPhysicalNic $Nic -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
    }
  }
}
$vSwitch=(Get-VirtualSwitch -Server $vmHost -Name $vSwitchName)
$CurrentNics=@($vSwitch | Get-VMHostNetworkAdapter -Physical | Select-Object -ExpandProperty Name)
if ($CurrentNics -ne $null) {
  Foreach ($i in $CurrentNics){
    if ($DesiredActiveNics -notcontains $i -And $DesiredStandbyNics -notcontains $i -And $DesiredUnusedNics -notcontains $i){
      "Removing $i from $vSwitch on $vmHost" | Out-File -Append {{ vsphere_management_log }}
      $vmServer | Get-VMHostNetworkAdapter -Physical -Name $i | Remove-VirtualSwitchPhysicalNetworkAdapter -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
    }
  }
}
$vSwitch=(Get-VirtualSwitch -Server $vmHost -Name $vSwitchName)
$NicTeamingPolicy=($vmServer | Get-VirtualSwitch -Name $vSwitchName | Get-NicTeamingPolicy)
$ActiveNics=@(($NicTeamingPolicy).ActiveNic)
if ($DesiredActiveNics -ne $null) {
  Foreach ($i in $DesiredActiveNics) {
    if ($ActiveNics -notcontains $i){
      "Making $i active for $vSwitchName on $vmHost" | Out-File -Append {{ vsphere_management_log }}
      $vSwitch | Get-NicTeamingPolicy | Set-NicTeamingPolicy -MakeNicActive $i -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
    }
  }
}
$vSwitch=(Get-VirtualSwitch -Server $vmHost -Name $vSwitchName)
$NicTeamingPolicy=($vmServer | Get-VirtualSwitch -Name $vSwitchName | Get-NicTeamingPolicy)
$StandByNics=@(($NicTeamingPolicy).StandbyNic)
if ($DesiredStandbyNics -ne $null) {
  Foreach ($i in $DesiredStandbyNics) {
    if ($StandByNics -notcontains $i){
      "Making $i standby for $vSwitchName on $vmHost" | Out-File -Append {{ vsphere_management_log }}
      $vSwitch | Get-NicTeamingPolicy | Set-NicTeamingPolicy -MakeNicStandby $i -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
    }
  }
}
$vSwitch=(Get-VirtualSwitch -Server $vmHost -Name $vSwitchName)
$NicTeamingPolicy=($vmServer | Get-VirtualSwitch -Name $vSwitchName | Get-NicTeamingPolicy)
$UnusedNics=@(($NicTeamingPolicy).UnusedNic)
if ($DesiredUnusedNics -ne $null) {
  Foreach ($i in $DesiredUnusedNics) {
    if ($UnusedNics -notcontains $i){
      "Making $i unused for $vSwitchName on $vmHost" | Out-File -Append {{ vsphere_management_log }}
      $vSwitch | Get-NicTeamingPolicy | Set-NicTeamingPolicy -MakeNicUnused $i -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
    }
  }
}
{%   if vswitch['portgroups'] is defined %}
$CurrentPortGroups=@(($vSwitch | Get-VirtualPortGroup).Name)
{% if vswitch['portgroups'] is defined %}
$DesiredPortGroups=@("{% for pg in vswitch['portgroups'] %}{{ pg['name'] }}{% if not loop.last %}", "{% endif %}{% endfor %}")
{% elif vswitch['portgroups'] is not defined %}
$DesiredPortGroups=@()
{% endif %}
Foreach ($i in $CurrentPortGroups) {
  if ($DesiredPortGroups -ne $null) {
    if ($DesiredPortGroups -notcontains $i) {
    $vms=@($vmServer | Get-VirtualPortGroup -Name $i | Get-VM)
      if ($vms.Count -eq 0) {
        "Removing $i from $vSwitch on $vmHost" | Out-File -Append {{ vsphere_management_log }}
        $pg=($vSwitch | Get-VirtualPortGroup -Name $i)
        Remove-VirtualPortGroup -VirtualPortGroup $pg -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
      }
      if ($vms.Count -ne 0) {
        "Renaming $1 to $i-ToBeRemoved on $vmHost" | Out-File -Append {{ vsphere_management_log }}
        $pgRenameVlanId=((Get-VirtualPortGroup -Server $vmHost -Name $i).VlanId)
        Get-VirtualPortGroup -Server $vmHost -Name $i | Set-VirtualPortGroup -Name $i-ToBeRemoved -VLanId $pgRenameVlanId -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
      }
    }
  }
}
{%     for portgroup in vswitch['portgroups'] %}
$AllPortGroups=@((Get-VirtualPortGroup -Server $vmHost).Name)
$CurrentPortGroups=@(($vSwitch | Get-VirtualPortGroup).Name)
$PortGroupName="{{ portgroup['name'] }}"
if ($AllPortGroups -notcontains $PortGroupName){
  "Adding $i on $vSwitch on $vmHost" | Out-File -Append {{ vsphere_management_log }}
  New-VirtualPortGroup -Server $vmHost -VirtualSwitch $vSwitchName -Name $PortGroupName{% if portgroup['vlan_id'] is defined %} -VLanId {{ portgroup['vlan_id'] }}{% endif %} -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
}
if ($AllPortGroups -contains $PortGroupName){
  "Rename portgroup"
}
{%       if portgroup['inherit_failover_order'] is defined %}
$CurrentFailoverOrderInherited="$($vSwitch | Get-VirtualPortGroup -Name $PortGroupName | Get-NicTeamingPolicy | Select-Object -ExpandProperty IsFailoverOrderInherited)"
$DesiredFailoverOrderInherited="{{ portgroup['inherit_failover_order'] }}"
if ($CurrentFailoverOrderInherited -ne $DesiredFailoverOrderInherited) {
  "Changing failover policy from $CurrentFailoverOrderInherited to $DesiredFailoverOrderInherited on $vmHost" | Out-File -Append {{ vsphere_management_log }}
  $Policy=($vmServer | Get-VirtualPortGroup -Name $PortGroupName| Get-NicTeamingPolicy)
  Set-NicTeamingPolicy -VirtualPortGroupPolicy $Policy -InheritFailoverOrder ${{ portgroup['inherit_failover_order']|lower }} -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
}
{%       endif %}
{%     endfor %}
{%   endif %}
{%   if vswitch['load_balancing_policy'] is defined %}
$NicTeamingPolicy=($vmServer | Get-VirtualSwitch -Name $vSwitchName | Get-NicTeamingPolicy)
$LoadBalancingPolicy=($NicTeamingPolicy | Select-Object -ExpandProperty LoadBalancingPolicy)
$vmSwitchLoadBalancingPolicy="{{ vswitch['load_balancing_policy'] }}"
If ($LoadBalancingPolicy -ne $vmSwitchLoadBalancingPolicy) {
  "Setting $vSwitch Load Balancing Policy to $vmSwitchLoadBalancingPolicy on $vmHost" | Out-File -Append {{ vsphere_management_log }}
  $NicTeamingPolicy | Set-NicTeamingPolicy -LoadBalancingPolicy $vmSwitchLoadBalancingPolicy -Confirm $false | Out-File -Append {{ vsphere_management_log }}
}
{%   endif %}
{% endfor %}
$CurrentvSwitches=@(($vmServer | Get-VirtualSwitch).Name)
$DesiredvSwitches=@("{% for vs in vsphere_vswitches %}{{ vs['name'] }}{% if not loop.last %}", "{% endif %}{% endfor %}")
Foreach ($i in $CurrentvSwitches) {
  if ($DesiredvSwitches -notcontains $i) {
    "Removing $i on $vmHost" | Out-File -Append {{ vsphere_management_log }}
    Remove-VirtualSwitch -Server $vmHost $i -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
  }
}
Disconnect-VIServer * -Confirm:$false

{% endfor %}
