{% for host in groups[vsphere_management_hosts_group] %}
$vmHost="{{ hostvars[host]['ansible_host'] }}"

Connect-VIServer -Server $vmHost

$vmServer=(Get-VMHost -Server $vmHost)

{%   for vswitch in vsphere_vswitches %}
$AllvSwitches=(($vmServer | Get-VirtualSwitch).Name)
$vSwitchName="{{ vswitch['name'] }}"

if ($AllvSwitches -contains $vSwitchName) {
  "$vSwitchName already exists On $vmhost" | Out-File -Append {{ vsphere_management_log }}
}
else {
  "$vSwitchName does not exist On $vmhost" | Out-File -Append {{ vsphere_management_log }}
  New-VirtualSwitch -Server $vmHost -Name $vSwitchName -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
}
{%     if vswitch['active_nics'] is defined %}
$DesiredActiveNics=@("{{ vswitch['active_nics']|join('", "') }}")
{%     elif vswitch['active_nics'] is not defined %}
$DesiredActiveNics=@()
{%     endif %}
{%     if vswitch['standby_nics'] is defined %}
$DesiredStandbyNics=@("{{ vswitch['standby_nics']|join('", "') }}")
{%     elif vswitch['standby_nics'] is not defined %}
$DesiredStandbyNics=@()
{%     endif %}
{%     if vswitch['unused_nics'] is defined %}
$DesiredUnusedNics=@("{{ vswitch['unused_nics']|join('", "') }}")
{%     elif vswitch['unused_nics'] is not defined %}
$DesiredUnusedNics=@()
{%     endif %}

$vSwitch=(Get-VirtualSwitch -Server $vmHost -Name $vSwitchName)
$CurrentNics=@($vSwitch | Get-VMHostNetworkAdapter -Physical | Select-Object -ExpandProperty Name)

if ($DesiredActiveNics -ne $null) {
  Foreach ($i in $DesiredActiveNics){
    if ($CurrentNics -notcontains $i){
      "Adding $i to $vSwitch on $vmHost" | Out-File -Append {{ vsphere_management_log }}
      $Nic=$(Get-VMHostNetworkAdapter -Server $vmHost -Physical -Name $i)
      $vSwitch | Add-VirtualSwitchPhysicalNetworkAdapter -VMHostPhysicalNic $Nic -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
    }
  }
}
if ($DesiredStandbyNics -ne $null) {
  Foreach ($i in $DesiredStandbyNics){
    if ($CurrentNics -notcontains $i){
      "Adding $i to $vSwitch on $vmHost" | Out-File -Append {{ vsphere_management_log }}
      $Nic=$(Get-VMHostNetworkAdapter -Server $vmHost -Physical -Name $i)
      $vSwitch | Add-VirtualSwitchPhysicalNetworkAdapter -VMHostPhysicalNic $Nic -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
    }
  }
}
if ($DesiredUnusedNics -ne $null) {
  Foreach ($i in $DesiredUnusedNics){
    if ($CurrentNics -notcontains $i){
      "Adding $i to $vSwitch on $vmHost" | Out-File -Append {{ vsphere_management_log }}
      $Nic=$(Get-VMHostNetworkAdapter -Server $vmHost -Physical -Name $i)
      $vSwitch | Add-VirtualSwitchPhysicalNetworkAdapter -VMHostPhysicalNic $Nic -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
    }
  }
}
$vSwitch=(Get-VirtualSwitch -Server $vmHost -Name $vSwitchName)
$CurrentNics=@($vSwitch | Get-VMHostNetworkAdapter -Physical | Select-Object -ExpandProperty Name)
if ($CurrentNics -ne $null) {
  Foreach ($i in $CurrentNics){
    if ($DesiredActiveNics -notcontains $i -And $DesiredStandbyNics -notcontains $i -And $DesiredUnusedNics -notcontains $i){
      "Removing $i from $vSwitch on $vmHost" | Out-File -Append {{ vsphere_management_log }}
      $vmServer | Get-VMHostNetworkAdapter -Physical -Name $i | Remove-VirtualSwitchPhysicalNetworkAdapter -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
    }
  }
}
$vSwitch=(Get-VirtualSwitch -Server $vmHost -Name $vSwitchName)
$NicTeamingPolicy=($vmServer | Get-VirtualSwitch -Name $vSwitchName | Get-NicTeamingPolicy)
$ActiveNics=@(($NicTeamingPolicy).ActiveNic)
if ($DesiredActiveNics -ne $null) {
  Foreach ($i in $DesiredActiveNics) {
    if ($ActiveNics -notcontains $i){
      "Making $i active for $vSwitchName on $vmHost" | Out-File -Append {{ vsphere_management_log }}
      $vSwitch | Get-NicTeamingPolicy | Set-NicTeamingPolicy -MakeNicActive $i -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
    }
  }
}
$vSwitch=(Get-VirtualSwitch -Server $vmHost -Name $vSwitchName)
$NicTeamingPolicy=($vmServer | Get-VirtualSwitch -Name $vSwitchName | Get-NicTeamingPolicy)
$StandByNics=@(($NicTeamingPolicy).StandbyNic)
if ($DesiredStandbyNics -ne $null) {
  Foreach ($i in $DesiredStandbyNics) {
    if ($StandByNics -notcontains $i){
      "Making $i standby for $vSwitchName on $vmHost" | Out-File -Append {{ vsphere_management_log }}
      $vSwitch | Get-NicTeamingPolicy | Set-NicTeamingPolicy -MakeNicStandby $i -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
    }
  }
}
$vSwitch=(Get-VirtualSwitch -Server $vmHost -Name $vSwitchName)
$NicTeamingPolicy=($vmServer | Get-VirtualSwitch -Name $vSwitchName | Get-NicTeamingPolicy)
$UnusedNics=@(($NicTeamingPolicy).UnusedNic)
if ($DesiredUnusedNics -ne $null) {
  Foreach ($i in $DesiredUnusedNics) {
    if ($UnusedNics -notcontains $i){
      "Making $i unused for $vSwitchName on $vmHost" | Out-File -Append {{ vsphere_management_log }}
      $vSwitch | Get-NicTeamingPolicy | Set-NicTeamingPolicy -MakeNicUnused $i -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
    }
  }
}

{%   endfor %}

{%   for vswitch in vsphere_vswitches %}
{%     for portgroup in vswitch['portgroups'] %}
$DesiredVswitch="{{ vswitch['name'] }}"
$ManagementNetwork="{{ vsphere_vswitches_management_network }}"

$dpg="{{ portgroup['name'] }}"
$pgVlanId="{{ portgroup['vlan_id']|default(0) }}"
if ($dpg -ne $ManagementNetwork) {
  $AllPortGroups=(($vmServer | Get-VirtualPortGroup).Name)
  if ($AllPortGroups -contains $dpg) {
    $dpgvs=($vmServer | Get-VirtualPortGroup -Name $dpg | Get-VirtualSwitch | Select-Object -ExpandProperty Name)
    if ($dpgvs -eq $DesiredVswitch) {
      "$dpg Exists On The Correct vSwitch On $vmhost" | Out-File -Append {{ vsphere_management_log }}
      $CurrentPGVlanId=((Get-VirtualPortGroup -Server $vmHost -Name $dpg).VlanId)
      $DesiredPGVlanID=$pgVlanId
      if ($CurrentPGVlanId -ne $DesiredPGVlanID) {
        Get-VirtualPortGroup -Server $vmHost -Name $dpg | Set-VirtualPortGroup -VLanId $DesiredPGVlanID
      }
      $pgToBeRemoved="$dpg-ToBeRemoved"
      if ($AllPortGroups -contains $pgToBeRemoved) {
        $dpgvsToBeRemoved=($vmServer | Get-VirtualPortGroup -Name $pgToBeRemoved | Get-VirtualSwitch | Select-Object -ExpandProperty Name)
        if ($dpgvsToBeRemoved -eq $dpgvs) {
          "$pgToBeRemoved Already Exists On The Correct vSwitch On $vmhost" | Out-File -Append {{ vsphere_management_log }}
          $vmServer | Get-VM | Get-NetworkAdapter | Where-Object NetworkName -eq $pgToBeRemoved | Set-NetworkAdapter -Portgroup $dpg -Confirm:$false -RunAsync | Out-File -Append {{ vsphere_management_log }}
          Get-VirtualPortGroup -Server $vmHost -Name $pgToBeRemoved | Remove-VirtualPortGroup -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
        }
      }
    }
    else {
      "$dpg Does Not Exist On The Correct vSwitch On $vmhost" | Out-File -Append {{ vsphere_management_log }}
      $pgToBeRemoved="$dpg-ToBeRemoved"
      if ($AllPortGroups -notcontains $pgToBeRemoved) {
        "$dpg-ToBeRemoved Does Not Exist So Creating It On $vmhost" | Out-File -Append {{ vsphere_management_log }}
        New-VirtualPortGroup -Server $vmHost -VirtualSwitch $DesiredVswitch -Name $pgToBeRemoved -VLanId $pgVlanId -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
        $vmServer | Get-VM | Get-NetworkAdapter | Where-Object NetworkName -eq $dpg | Set-NetworkAdapter -Portgroup $pgToBeRemoved -Confirm:$false -RunAsync | Out-File -Append {{ vsphere_management_log }}
        Get-VirtualPortGroup -Server $vmHost -Name $dpg | Remove-VirtualPortGroup -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
        New-VirtualPortGroup -Server $vmHost -VirtualSwitch $DesiredVswitch -Name $dpg -VLanId $pgVlanId -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
        $vmServer | Get-VM | Get-NetworkAdapter | Where-Object NetworkName -eq $pgToBeRemoved | Set-NetworkAdapter -Portgroup $dpg -Confirm:$false -RunAsync | Out-File -Append {{ vsphere_management_log }}
        Get-VirtualPortGroup -Server $vmHost -Name $pgToBeRemoved | Remove-VirtualPortGroup -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
      }
      else {
        "$dpgvsToBeRemoved Exists...Moving Any VMs Connected And Then Removing $dpgvsToBeRemoved On $vmhost" | Out-File -Append {{ vsphere_management_log }}
        $vmServer | Get-VM | Get-NetworkAdapter | Where-Object NetworkName -eq $pgToBeRemoved | Set-NetworkAdapter -Portgroup $dpg -Confirm:$false -RunAsync | Out-File -Append {{ vsphere_management_log }}
        Get-VirtualPortGroup -Server $vmHost -Name $pgToBeRemoved | Remove-VirtualPortGroup -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
      }
    }
  }
  else {
    "$dpg Does Not Exist so creating it On $vmhost" | Out-File -Append {{ vsphere_management_log }}
    New-VirtualPortGroup -Server $vmHost -VirtualSwitch $dpgvs -Name $dpg -VLanId $pgVlanId -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
  }
}
{%     if portgroup['inherit_failover_order'] is defined %}
$CurrentFailoverOrderInherited="$($vmServer | Get-VirtualPortGroup -Name $dpg | Get-NicTeamingPolicy | Select-Object -ExpandProperty IsFailoverOrderInherited)"
$DesiredFailoverOrderInherited="{{ portgroup['inherit_failover_order'] }}"
if ($CurrentFailoverOrderInherited -ne $DesiredFailoverOrderInherited) {
  "Changing failover policy from $CurrentFailoverOrderInherited to $DesiredFailoverOrderInherited on $vmHost" | Out-File -Append {{ vsphere_management_log }}
  $Policy=($vmServer | Get-VirtualPortGroup -Name $dpg| Get-NicTeamingPolicy)
  Set-NicTeamingPolicy -VirtualPortGroupPolicy $Policy -InheritFailoverOrder ${{ portgroup['inherit_failover_order']|lower }} -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
}
{%     endif %}
{%     if vswitch['load_balancing_policy'] is defined %}
$NicTeamingPolicy=($vmServer | Get-VirtualSwitch -Name $vSwitchName | Get-NicTeamingPolicy)
$LoadBalancingPolicy=($NicTeamingPolicy | Select-Object -ExpandProperty LoadBalancingPolicy)
$vmSwitchLoadBalancingPolicy="{{ vswitch['load_balancing_policy'] }}"
If ($LoadBalancingPolicy -ne $vmSwitchLoadBalancingPolicy) {
  "Setting $vSwitch Load Balancing Policy to $vmSwitchLoadBalancingPolicy on $vmHost" | Out-File -Append {{ vsphere_management_log }}
  $NicTeamingPolicy | Set-NicTeamingPolicy -LoadBalancingPolicy $vmSwitchLoadBalancingPolicy -Confirm $false | Out-File -Append {{ vsphere_management_log }}
}
{%     endif %}
{%   endfor %}
{% endfor %}

$DesiredvSwitches=@("{% for vs in vsphere_vswitches %}{{ vs['name'] }}{% if not loop.last %}", "{% endif %}{% endfor %}")
$AllvSwitches=(($vmServer | Get-VirtualSwitch).Name)
foreach ($vSwitch in $AllvSwitches) {
  if ($DesiredvSwitches -notcontains $vSwitch) {
{%   if vsphere_vswitches_remove_unmanaged_vswitches %}
    "$vSwitch Is Not A Desired vSwitch On $vmhost...Removing $vSwitch" | Out-File -Append {{ vsphere_management_log }}
    Remove-VirtualSwitch -Server $vmHost $vSwitch -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
{%   elif not vsphere_vswitches_remove_unmanaged_vswitches %}
    "$vSwitch Is Not A Desired vSwitch On $vmhost...IT SHOULD BE REMOVED!!!!" | Out-File -Append {{ vsphere_management_log }}
{%   endif %}
  }
  else {
    "$vSwitch Is A Desired vSwitch On $vmhost...Not Removing $vSwitch" | Out-File -Append {{ vsphere_management_log }}
  }
}

{%   if vsphere_vswitches_quarantine_unmanaged_portgroups %}
$AllvSwitches=@(($vmServer | Get-VirtualSwitch).Name)
$QuarantinevSwitch="{{ vsphere_vswitches_quarantine_vswitch }}"
if ($AllvSwitches -notcontains $QuarantinevSwitch) {
  $vmServer | New-VirtualSwitch -Name $QuarantinevSwitch -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
}

{%     for vswitch in vsphere_vswitches %}
$vSwitchName="{{ vswitch['name'] }}"
{%       if vswitch['portgroups'] is defined %}
$SafePortGroups=@("{% for dpg in vswitch['portgroups'] %}{{ dpg['name'] }}{% if not loop.last %}", "{% endif %}{% endfor %}")
{%       elif vswitch['portgroups'] is not defined %}
$SafePortGroups=@()
{%       endif %}
$vSwitchPortGroups=@(($vmServer | Get-VirtualSwitch -Name $vSwitchName | Get-VirtualPortGroup).Name)
if ($vSwitchPortGroups -ne $null) {
  foreach ($pg in $vSwitchPortGroups) {
    if ($SafePortGroups -notcontains $pg) {
      $vms=@(($vmServer | Get-VirtualPortGroup -Name $pg | Get-VM).Name)
      if ($vms.Count -ne 0 -and $vms -ne $null) {
        foreach ($vm in $vms) {
          $_vm=($vmServer | Get-VM -Name $vm)
          $_vmPowerState=($_vm.PowerState)
          if ($_vmPowerState -eq 'PoweredOn') {
            $_vm | Shutdown-VMGuest -Confirm:$false  | Out-File -Append {{ vsphere_management_log }}
            do {
              $_vm=($vmServer | Get-VM -Name $vm)
              $_vmPowerState=($_vm.PowerState)
              sleep 3
            } until ($_vmPowerState -eq 'PoweredOff')
          }
          $QuarantinePG="Quarantine_$pg"
          $pgVlanId=((Get-VirtualPortGroup -Server $vmHost -Name $pg).VlanId)
          $QuarantinePortGroups=@(($vmServer | Get-VirtualSwitch -Name $QuarantinevSwitch | Get-VirtualPortGroup).Name)
          if ($QuarantinePortGroups -notcontains $QuarantinePG) {
            New-VirtualPortGroup -Server $vmHost -VirtualSwitch $QuarantinevSwitch -Name $QuarantinePG -VLanId $pgVlanId -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
          }
          $_vm | Get-NetworkAdapter | Where-Object NetworkName -eq $pg | Set-NetworkAdapter -Portgroup $QuarantinePG -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
        }
      }
      else {
        "Deleting $pg"
      }
    }
  }
}

{%     endfor %}
{%   endif %}

Disconnect-VIServer * -Confirm:$false

{% endfor %}
