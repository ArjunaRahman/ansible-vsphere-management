{% if groups['vsphere_bootstrap_vms_deploy'] is defined %}
$vmHost="{{ hostvars[vsphere_bootstrap_host]['ansible_host'] }}"
{%   for vm in groups['vsphere_bootstrap_vms_deploy'] %}
$DataStore="{{ hostvars[vm]['datastore'] }}"
$NetworkName="{{ hostvars[vm]['network_name'] }}"
$vAppSourcePath="{{ hostvars[vm]['vapp_source_path'] }}"
$vmName="{{ hostvars[vm]['inventory_hostname'] }}"

Connect-VIServer -Server $vmHost | Out-Null

$vmServer=Get-VMHost -Server $vmHost
$vms=($vmServer | Get-VM).Name

{%     if hostvars[vm]['hw_product_uuid'] is defined %}
  $vmInventoryUuid="{{ hostvars[vm]['hw_product_uuid'] }}"
if ($vms -notcontains $vmName) {
  foreach ($vm in $vms) {
    $vm=$vmServer | Get-VM $vm
    $vmView=$_vm | Get-View
    $vmUuid=$_vmView.Config.Uuid
    if ($vmInventoryUuid -eq $vmUuid) {
      $vm | Set-VM -Name $vmName -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
    }
  }
}
$vms=($vmServer | Get-VM).Name
{%     endif %}

if ($vms -contains $vmName) {
  $vm=$vmServer | Get-VM $vmName
  $vmView=$vm | Get-View
  $vmUuid=$vmView.Config.Uuid
{%   if hostvars[vm]['hw_product_uuid'] is defined %}
  $vmInventoryUuid="{{ hostvars[vm]['hw_product_uuid'] }}"
  if ($vmInventoryUuid -eq $vmUuid) {
    $vmUuidMatches=$true
  }
  else {
    $vmUuidMatches=$false
  }
{%   elif hostvars[vm]['hw_product_uuid'] is not defined %}
    $vmUuidMatches=$true
{%   endif %}
  if ($vmUuidMatches) {
    $vm=($vmServer | Get-VM $vmName)
    $vmPowerState=$vm.PowerState
    $vmNetwork=($vm | Get-NetworkAdapter).NetworkName
    if ($vmNetwork -ne $NetworkName) {
      if ($vmPowerState -eq 'PoweredOn'){
        "VM Is Not On Correct Network...Moving From $vmNetwork To $NetworkName" | Out-File -Append {{ vsphere_management_log }}
        $vm | Get-NetworkAdapter | Set-NetworkAdapter -NetworkName $NetworkName -StartConnected:$true -Connected:$false -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
        $vm | Get-NetworkAdapter | Set-NetworkAdapter -NetworkName $NetworkName -StartConnected:$true -Connected:$true -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
      }
      else {
        $vm | Get-NetworkAdapter | Set-NetworkAdapter -NetworkName $NetworkName -StartConnected:$true -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
      }
    }
    $vmCPU=$vm.NumCpu
    if ($vmCPU -ne {{ hostvars[vm]['cpus'] }}) {
      if ($vmPowerState -eq 'PoweredOn') {
        $vm | Shutdown-VMGuest -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
        do {
          $vm=$vmServer | Get-VM $vmName
          $vmPowerState=$vm.PowerState
          sleep 3
        } until ($vmPowerState -eq 'PoweredOff')
      }
      $vm | set-VM -NumCpu {{ hostvars[vm]['cpus'] }} -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
    }
    $vm=$vmServer | Get-VM $vmName
    $vmPowerState=$vm.PowerState
    $vmMemory=$vm.MemoryMB
    if ($vmMemory -ne {{ hostvars[vm]['memory_mb'] }}) {
      if ($vmPowerState -eq 'PoweredOn') {
        $vm | Shutdown-VMGuest -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
        do {
          $vm=$vmServer | Get-VM $vmName
          $vmPowerState=$vm.PowerState
          sleep 3
        } until ($vmPowerState -eq 'PoweredOff')
      }
      $vm | Set-VM -MemoryMB {{ hostvars[vm]['memory_mb'] }} -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
    }
    $vm=$vmServer | Get-VM $vmName
    $vmPowerState=$vm.PowerState
    if ($vmPowerState -ne 'PoweredOn') {
      $vm | Start-VM -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
    }
    do {
      $vmView=$vm | Get-View
      $vmToolsStatus=$vmView.Guest.ToolsStatus
      sleep 3
    }
    until ($vmToolsStatus -eq 'toolsOk')
  }
}
else {
  $deployBootstrapVM=($vmServer | Import-VApp -Datastore $DataStore -Source $vAppSourcePath -Name $vmName -DiskStorageFormat Thin -Confirm:$false) | Out-File -Append {{ vsphere_management_log }}
  $vm=$vmServer | Get-VM $vmName
  $vmCPU=$vm.NumCpu
  if ($vmCPU -ne {{ hostvars[vm]['cpus'] }}) {
    $vm | set-VM -NumCpu {{ hostvars[vm]['cpus'] }} -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
  }
  $vmMemory=$vm.MemoryMB
  if ($vmMemory -ne {{ hostvars[vm]['memory_mb'] }}) {
    $vm | Set-VM -MemoryMB {{ hostvars[vm]['memory_mb'] }} -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
  }
  $vm | Get-NetworkAdapter| Set-NetworkAdapter -NetworkName $NetworkName -StartConnected:$true -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
  $vm | Start-VM -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
  do {
    $vmView=$vm | Get-View
    $vmToolsStatus=$vmView.Guest.ToolsStatus
    sleep 3
  }
  until ($vmToolsStatus -eq 'toolsOk')
}
$SecureBootStrapUser="{{ vsphere_bootstrap_user_info['username'] }}"
$SecureBootStrapPassword=Get-Content {{ vsphere_bootstrap_vms_secure_password_file }} | ConvertTo-SecureString
$SecureCreds=New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $SecureBootStrapUser,$SecureBootStrapPassword
$vm=$vmServer | Get-VM $vmName
$vmView=$vm | Get-View
$vmPowerState=$vm.PowerState
$vmToolsStatus=$vmView.Guest.ToolsStatus
if ($vmPowerState -eq 'PoweredOn' -and $vmToolsStatus -eq 'toolsOk') {
  $vmGuestFamily=$vm.Guest.GuestFamily
  $vmHostName=$vm.Guest.HostName
  if ($vmGuestFamily -eq 'linuxGuest') {
    if ($vmHostName -ne $vmName) {
      $vm | Invoke-VMScript -GuestCredential $SecureCreds -ScriptType Bash "sudo hostnamectl set-hostname $vmName" | Out-File -Append {{ vsphere_management_log }}
      $vm | Restart-VMGuest -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
      do {
        $vm=$vmServer | Get-VM $vmName
        $vmView=$vm | Get-View
        $vmToolsStatus=$vmView.Guest.ToolsStatus
        sleep 3
      }
      until ($vmToolsStatus -eq 'toolsOk')
    }
  }
}
{%   endfor %}

Disconnect-VIServer * -Confirm:$false

{% endif %}
