{% if groups['vsphere_bootstrap_vms_deploy'] is defined %}
$vmHost="{{ hostvars[vsphere_bootstrap_host]['ansible_host'] }}"
{%   for vm in groups['vsphere_bootstrap_vms_deploy'] %}
$DataStore="{{ hostvars[vm]['datastore'] }}"
$NetworkName="{{ hostvars[vm]['network_name'] }}"
$vAppSourcePath="{{ hostvars[vm]['vapp_source_path'] }}"
$vmName="{{ hostvars[vm]['inventory_hostname'] }}"

Connect-VIServer -Server $vmHost

$vmServer=(Get-VMHost -Server $vmHost)
$vms=@(($vmServer | Get-VM).Name)

{%     if hostvars[vm]['hw_product_uuid'] is defined %}
  $vmInventoryUuid="{{ hostvars[vm]['hw_product_uuid'] }}"
if ($vms -notcontains $vmName) {
  foreach ($i in $vms) {
    $vmUuid=$((($vmServer | get-VM $i | Get-View).Config).Uuid)
    if ($vmInventoryUuid -eq $vmUuid) {
      $_vmName=$((($vmServer | get-VM $i | Get-View).Config).Name)
      $vmServer | Get-VM $_vmName | Set-VM -Name $vmName -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
    }
  }
}
$vms=@(($vmserver | Get-VM).Name)
{%     endif %}

if ($vms -contains $vmName) {
  $vmUuid=((($vmServer | get-VM $vmName | Get-View).Config).Uuid)
{%   if hostvars[vm]['hw_product_uuid'] is defined %}
  $vmInventoryUuid="{{ hostvars[vm]['hw_product_uuid'] }}"
  if ($vmInventoryUuid -eq $vmUuid) {
    $vmUuidMatches=$true
  }
  else {
    $vmUuidMatches=$false
  }
{%   elif hostvars[vm]['hw_product_uuid'] is not defined %}
    $vmUuidMatches=$true
{%   endif %}
  if ($vmUuidMatches) {
    $vm=($vmServer | Get-VM $vmName)
    $vmPowerState=$($vm.PowerState)
    $vmNetwork=($($vm | Get-NetworkAdapter).NetworkName)
    if ($vmNetwork -ne $NetworkName) {
      if ($vmPowerState -eq 'PoweredOn'){
        "VM Is Not On Correct Network...Moving From $vmNetwork To $NetworkName" | Out-File -Append {{ vsphere_management_log }}
        $vm | Get-NetworkAdapter | Set-NetworkAdapter -NetworkName $NetworkName -StartConnected:$true -Connected:$false -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
        $vm | Get-NetworkAdapter | Set-NetworkAdapter -NetworkName $NetworkName -StartConnected:$true -Connected:$true -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
      }
      else {
        $vm | Get-NetworkAdapter | Set-NetworkAdapter -NetworkName $NetworkName -StartConnected:$true -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
      }
    }
    $vmCPU=$($vm.NumCpu)
    if ($vmCPU -ne {{ hostvars[vm]['cpus'] }}) {
      if ($vmPowerState -eq 'PoweredOn') {
        $vm | Shutdown-VMGuest -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
        do {
          $vm=($vmServer | Get-VM $vmName)
          $vmPowerState=$($vm.PowerState)
          sleep 3
        } until ($vmPowerState -eq 'PoweredOff')
      }
      $vm | set-VM -NumCpu {{ hostvars[vm]['cpus'] }} -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
    }
    $vm=($vmServer | Get-VM $vmName)
    $vmPowerState=$($vm.PowerState)
    $vmMemory=$($vm.MemoryMB)
    if ($vmMemory -ne {{ hostvars[vm]['memory_mb'] }}) {
      if ($vmPowerState -eq 'PoweredOn') {
        $vm | Shutdown-VMGuest -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
        do {
          $vm=($vmServer | Get-VM $vmName)
          $vmPowerState=$($vm.PowerState)
          sleep 3
        } until ($vmPowerState -eq 'PoweredOff')
      }
      $vm | Set-VM -MemoryMB {{ hostvars[vm]['memory_mb'] }} -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
    }
    $vm=($vmServer | Get-VM $vmName)
    $vmPowerState=$($vm.PowerState)
    if ($vmPowerState -ne 'PoweredOn') {
      $vm | Start-VM -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
    }
    do {
      $vmToolsStatus=($vm | Get-View).Guest.ToolsStatus
      sleep 3
    }
    until ($vmToolsStatus -eq 'toolsOk')
  }
}
else {
  $deployBootstrapVM=($vmServer | Import-VApp -Datastore $DataStore -Source $vAppSourcePath -Name $vmName -DiskStorageFormat Thin -Confirm:$false) | Out-File -Append {{ vsphere_management_log }}
  $vm=($vmServer | Get-VM $vmName)
  $vmCPU=$($vm.NumCpu)
  if ($vmCPU -ne {{ hostvars[vm]['cpus'] }}) {
    $vm | set-VM -NumCpu {{ hostvars[vm]['cpus'] }} -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
  }
  $vmMemory=$($vm.MemoryMB)
  if ($vmMemory -ne {{ hostvars[vm]['memory_mb'] }}) {
    $vm | Set-VM -MemoryMB {{ hostvars[vm]['memory_mb'] }} -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
  }
  $vm | Get-NetworkAdapter| Set-NetworkAdapter -NetworkName $NetworkName -StartConnected:$true -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
  $vm | Start-VM -Confirm:$false | Out-File -Append {{ vsphere_management_log }}
  do {
    $vmToolsStatus=($vm | Get-View).Guest.ToolsStatus
    sleep 3
  }
  until ($vmToolsStatus -eq 'toolsOk')
}
{%   endfor %}

Disconnect-VIServer * -Confirm:$false

{% endif %}
