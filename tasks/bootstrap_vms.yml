---
- name: bootstrap_vms | Setting Bootstrap Host
  set_fact:
    vsphere_bootstrap_host: "{{ groups[vsphere_management_hosts_group][0] }}"

- name: bootstrap_vms | Creating bootstrap_vms_deploy Dynamic Group
  add_host:
    groups: vsphere_bootstrap_vms_deploy
    hostname: "{{ item['vm_name'] }}"
    cpus: "{{ item['cpus'] }}"
    datastore: "{{ item['datastore'] }}"
    memory_mb: "{{ item['memory_mb'] }}"
    network_name: "{{ item['network_name'] }}"
    vapp_source_path: "{{ item['vapp_source_path'] }}"
  changed_when: false
  with_items: "{{ vsphere_bootstrap_vms }}"
  when: item['deploy']

- name: bootstrap_vms | Generating Secure Password
  win_shell: $Password=ConvertTo-SecureString -String "{{ vsphere_bootstrap_user_info['password'] }}" -AsPlainText -Force | ConvertFrom-SecureString | Out-File {{ vsphere_bootstrap_vms_secure_password_file }}
  no_log: true

- name: bootstrap_vms | Generating bootstrap_vms.ps1 Powershell Script
  win_template:
    src: bootstrap_vms.ps1.j2
    dest: c:\tmp\bootstrap_vms.ps1
  register: _vsphere_bootstrap_vms_script

- name: bootstrap_vms | Executing bootstrap_vms.ps1 Powershell Script
  win_shell: c:\tmp\bootstrap_vms.ps1
  failed_when: _bootstrap_vms_script_execution['stderr_lines'] != []
  register: _bootstrap_vms_script_execution

- debug: var=_bootstrap_vms_script_execution

- name: bootstrap_vms | Capturing JSON Formatted Info
  win_shell: |
    $vmHost="{{ hostvars[vsphere_bootstrap_host]['ansible_host'] }}"
    Connect-VIServer -Server $vmHost | Out-Null
    $vmServer=(Get-VMHost -Server $vmHost)
    (($vmServer | Get-VM {{ hostvars[item]['inventory_hostname'] }} | Get-View).Config) | ConvertTo-Json
    Disconnect-VIServer * -Confirm:$false | Out-Null
  register: _vsphere_bootstrap_vm_configs
  with_items: "{{ groups['vsphere_bootstrap_vms_deploy'] }}"
  when: groups['vsphere_bootstrap_vms_deploy'] is defined

- name: bootstrap_vms | Generating Nicely Formatted JSON Info
  template:
    src: bootstrap_vms.json.j2
    dest: ./bootstrap_vms.json
  delegate_to: localhost
  become: false
  when: _vsphere_bootstrap_vm_configs['changed']

- name: bootstrap_vms | Waiting For All IP Addresses To Be Captured
  vmware_guest_facts:
    hostname: "{{ hostvars[vsphere_bootstrap_host]['ansible_host'] }}"
    username: "{{ vsphere_user_info['username'] }}"
    password: "{{ vsphere_user_info['password'] }}"
    datacenter: ha-datacenter
    validate_certs: false
    name: "{{ item['vm_name'] }}"
    folder: /ha-datacenter/vm
  delegate_to: localhost
  register: _vsphere_bootstrap_vm_facts
  until: >
         (_vsphere_bootstrap_vm_facts['instance']['ipv4'] != None)
  retries: 30
  delay: 2
  failed_when: false
  with_items: "{{ vsphere_bootstrap_vms }}"
  when: item['deploy']

- name: bootstrap_vms | Creating Dynamic Inventory For bootstrap_vm
  add_host:
    hostname: "{{ item['instance']['hw_name'] }}"
    ansible_host: "{{ item['instance']['ipv4'] }}"
    groups: bootstrap_vms
    hw_product_uuid: "{{ item['instance']['hw_product_uuid'] }}"
  changed_when: false
  with_items: "{{ _vsphere_bootstrap_vm_facts['results'] }}"
  when: >
        (item['failed'] is defined and
        not item['failed']) or
        item['failed'] is not defined

- name: bootstrap_vms | Creating Dynamic Inventory For bootstrap_vms_failed
  add_host:
    hostname: "{{ item['instance']['hw_name'] }}"
    ansible_host: "{{ item['instance']['ipv4']|default(omit) }}"
    hw_product_uuid: "{{ item['instance']['hw_product_uuid'] }}"
    groups: bootstrap_vms_failed
  changed_when: false
  with_items: "{{ _vsphere_bootstrap_vm_facts['results'] }}"
  when: >
        item['failed'] is defined and
        item['failed']

- name: bootstrap_vms | Displaying IP Addresses For Each VM
  debug: msg="{{ hostvars[item]['inventory_hostname'] }} has IP{{':'}} {{ hostvars[item]['ansible_host'] }}"
  with_items: "{{ groups['bootstrap_vms'] }}"
  when: >
        groups['bootstrap_vms'] is defined and
        (groups['vsphere_bootstrap_vms_deploy'] is defined and
        hostvars[item]['inventory_hostname'] in groups['vsphere_bootstrap_vms_deploy'])

- name: bootstrap_vms | Displaying Failed VMs
  debug: msg="{{ hostvars[item]['inventory_hostname'] }} Failed and has IP{{':'}} {{ hostvars[item]['ansible_host'] }}"
  with_items: "{{ groups['bootstrap_vms_failed'] }}"
  when: groups['bootstrap_vms_failed'] is defined

- name: bootstrap_vms | Waiting for SSH
  wait_for:
    host: "{{ hostvars[item]['ansible_host'] }}"
    port: 22
    search_regex: OpenSSH
    delay: 10
  vars:
    ansible_connection: local
  with_items: "{{ groups['bootstrap_vms'] }}"
  when: >
        vsphere_bootstrap_vms_wait_for_ssh and
        groups['bootstrap_vms'] is defined and
        (groups['vsphere_bootstrap_vms_deploy'] is defined and
        hostvars[item]['inventory_hostname'] in groups['vsphere_bootstrap_vms_deploy'])

- name: bootstrap_vms | Creating Inventory For bootstrap_vms
  template:
    src: bootstrap_vms.inv.j2
    dest: "{{ vsphere_bootstrap_vms_inventory_file }}"
  become: false
  delegate_to: localhost
  when: vsphere_bootstrap_generate_inventory
