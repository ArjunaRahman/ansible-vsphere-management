---
- name: powerdns_vms | Setting Bootstrap Host
  set_fact:
    vsphere_bootstrap_host: "{{ groups[vsphere_management_hosts_group][0] }}"

- name: powerdns_vms | Creating Dynamic Inventory For powerdns_vms
  add_host:
    hostname: "{{ vsphere_powerdns_vms['naming'] + '_0' + item }}"
    groups: vsphere_powerdns_vms_deploy
  changed_when: false
  with_sequence: start=1 end={{ vsphere_powerdns_vms['vm_count'] }}

- name: powerdns_vms | Generating Secure Password
  win_shell: $Password=ConvertTo-SecureString -String "{{ vsphere_bootstrap_user_info['password'] }}" -AsPlainText -Force | ConvertFrom-SecureString | Out-File {{ vsphere_bootstrap_vms_secure_password_file }}
  no_log: true

- name: powerdns_vms | Generating powerdns_vms.ps1 Powershell Script
  win_template:
    src: powerdns_vms.ps1.j2
    dest: c:\tmp\powerdns_vms.ps1
  register: _vsphere_powerdns_vms_script

- name: powerdns_vms | Executing powerdns_vms.ps1 Powershell Script
  win_shell: c:\tmp\powerdns_vms.ps1
  failed_when: _powerdns_vms_script_execution['stderr_lines'] != []
  register: _powerdns_vms_script_execution

- name: powerdns_vms | Waiting For All IP Addresses To Be Captured
  vmware_guest_facts:
    hostname: "{{ hostvars[vsphere_bootstrap_host]['ansible_host'] }}"
    username: "{{ vsphere_user_info['username'] }}"
    password: "{{ vsphere_user_info['password'] }}"
    datacenter: ha-datacenter
    validate_certs: false
    name: "{{ hostvars[item]['inventory_hostname'] }}"
    folder: /ha-datacenter/vm
  delegate_to: localhost
  register: _vsphere_powerdns_vm_facts
  until: >
         (_vsphere_powerdns_vm_facts['instance']['ipv4'] != None)
  retries: 30
  delay: 2
  failed_when: false
  with_items: "{{ groups['vsphere_powerdns_vms_deploy'] }}"
  when: groups['vsphere_powerdns_vms_deploy'] is defined

- name: powerdns_vms | Creating Initial VM Snapshot
  vmware_guest_snapshot:
    hostname: "{{ hostvars[vsphere_bootstrap_host]['ansible_host'] }}"
    username: "{{ vsphere_user_info['username'] }}"
    password: "{{ vsphere_user_info['password'] }}"
    datacenter: ha-datacenter
    validate_certs: false
    name: "{{ item['instance']['hw_name'] }}"
    folder: /ha-datacenter/vm
    snapshot_name: post_deploy
    state: present
    uuid: "{{ item['instance']['hw_product_uuid'] }}"
  delegate_to: localhost
  with_items: "{{ _vsphere_powerdns_vm_facts['results'] }}"
  when: item['instance']['snapshots'] == []

- name: powerdns_vms | Creating Dynamic Inventory For vsphere_powerdns_vms
  add_host:
    hostname: "{{ item['instance']['hw_name'] }}"
    ansible_host: "{{ item['instance']['ipv4'] }}"
    groups: vsphere_powerdns_vms
    hw_product_uuid: "{{ item['instance']['hw_product_uuid'] }}"
  changed_when: false
  with_items: "{{ _vsphere_powerdns_vm_facts['results'] }}"
  when: >
        (item['failed'] is defined and
        not item['failed']) or
        item['failed'] is not defined

- name: powerdns_vms | Displaying IP Addresses For Each VM
  debug: msg="{{ hostvars[item]['inventory_hostname'] }} has IP{{':'}} {{ hostvars[item]['ansible_host'] }}"
  with_items: "{{ groups['vsphere_powerdns_vms'] }}"
  when: >
        groups['vsphere_powerdns_vms'] is defined and
        (groups['vsphere_powerdns_vms_deploy'] is defined and
        hostvars[item]['inventory_hostname'] in groups['vsphere_powerdns_vms_deploy'])

- name: powerdns_vms | Creating Inventory For vsphere_powerdns_vms
  template:
    src: powerdns_vms.inv.j2
    dest: "{{ vsphere_powerdns_vms_inventory_file }}"
  become: false
  delegate_to: localhost
  when: vsphere_powerdns_generate_inventory
